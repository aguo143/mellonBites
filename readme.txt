My project is meant to be an app made specifically for CMU students to help track what they are eating on campus. Users can track what they have eaten that day by selecting it in a menu, and get a score of how 'healthy' this food is. They will also get tracking circles in one of the main menus to show how on track they are for that day for their calorie and macronutrient counts. Finally, a bar graph can be pulled up in 'visualize' to show the past seven days of calorie intake activity for the user.

The file should run automatically when you run it like a normal python file, using either terminal (by navigating to the folder) or running it in pyzo (though this particular method is untested, since I have only been running it on terminal through sublime).

From the start page, you can create a new user profile or you can login as an existing user. All these profiles are stored in two text documents (which need to be within the termProject folder, but should not be stored in any sort of file within termProject). To type, click on the boxes (no cursor will appear,
but letters should appear in the boxes as you type). In the new user selection screen, you can also select the colored boxes which will store your information. The box will be highlighted when you select it to let you know you have selected it, and then return to its normal color when you use your cursor elsewhere. Without the proper data input, the screen will not let you pass to the next screen and will remind you to fill out information properly. Weight, Height, and Age must be numbers. All this personal information is stored in 'users.txt', and is read later by splitting along lines and commas.

On the next page, based on your user input (signing in from an existing user can also lead you to this page, using the back buttons from the home screen, not the login screen), your suggested daily macros are listed and shown in a graphical form. This is calculated based on an equation from this video: goo.gl/HeTXfq, as well as with some average ratios that I personally decided on to make the calculation more general. Click 'Let's Go!' to now proceed to the main screen. Remember, at any given time you can click 'Settings' to change anything about your initial user information.

Now you are at the home page. With daily values beginning at zero, this top half of this page will visually show how on track you are to eating your suggested daily macros. This will only work if you stay on the app the entire day -- if you exit out, the information will be reset in the daily categories.
From here, we have two options available - "Log Food" or "Visualize". The "Recommend" and the "Grocery List" options currently do not have any function, but would be a possibility for the future.

Clicking 'Log Food': This will take you to a screen where you can select the location where you ate/want to eat, and then will give you available food options from there. This data is collected from individual html files from the http://cmu.mynutritioncalculator.net/ website. If you want to download more of these files for yourself, you can go to the site, and select options all the way until you have a specific meal. Then, save the whole site (Ctl+S) and save it as the name of the food + '.html'. You'll need to edit the 'initLogFoodCategories(data)' function to contain both any additional locations you may have added, and any additional meals you added following the existing format. You may need to do some more editing in the 'logFoodMealRedrawAll(canvas,data)' function also. Once you hit submit, the meal will get 'scored' using an algorithm that I created based off the principles of percent daily values and Lifesum's general formula for determining score from 
http://support.lifesum.com/customer/en/portal/articles/2173593-food-rating---that-s-how-it-works. More explanation of this formula is given in the designDoc.

Clicking 'Visualize': 'Visualize' currently pulls up the past seven days of data for a specific user. If there isn't any, it will not pull up any bars, only the bars it has data for that specific day. It shows these values in relation to your target cals, and assumes that 3000 is a good maximum calorie input for the given users. The information for this is stored similarly to the user info, but is instead stored in timeData.txt.

You can navigate back to any previous screen using a series of back button presses. And that's it! Enjoy.